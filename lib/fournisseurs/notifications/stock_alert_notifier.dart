import 'package:flutter/cupertino.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../models/stock_alert.dart';
import '../../pagination/paginated_stock_alert_list.dart';
import '../repositories/stock_alert_repository.dart';

class StockAlertNotifier extends StateNotifier<AsyncValue<PaginatedStockAlertList>> {
  final StockAlertRepository repository;

  StockAlertNotifier(this.repository) : super(const AsyncLoading()) {
    fetchStockAlerts();
  }

  Future<void> fetchStockAlerts({int page = 1}) async {
    debugPrint("ðŸ”„ [Notifier] fetchStockAlerts(page: $page) dÃ©marrÃ©");
    if (state is! AsyncData) {
      state = const AsyncLoading();
    }
    try {
      final paginated = await repository.fetchStockAlerts(page: page);
      debugPrint("âœ… [Notifier] paginated.results = ${paginated.results}");
      state = AsyncData(paginated);
    } catch (e, st) {
      debugPrint("ðŸš¨ [Notifier] Erreur pendant fetchStockAlerts: $e");
      state = AsyncError(e, st);
    }
  }

  Future<void> refresh() async => fetchStockAlerts();

  Future<void> deleteStockAlert(int id) async {
    debugPrint("ðŸ”„ [Notifier] deleteStockAlert(id: $id) dÃ©marrÃ©");
    try {
      await repository.deleteStockAlert(id);
      debugPrint("âœ… [Notifier] deleteStockAlert(id: $id) rÃ©ussi");
      await fetchStockAlerts();
    } catch (e, st) {
      debugPrint("ðŸš¨ [Notifier] Erreur pendant deleteStockAlert: $e");
      state = AsyncError(e, st);
    }
  }

  Future<void> createAlert(StockAlert alert) async {
    debugPrint("ðŸ†• [Notifier] createAlert(alert: $alert) dÃ©marrÃ©");
    try {
      await repository.createStockAlert(alert);
      debugPrint("âœ… [Notifier] Alerte crÃ©Ã©e avec succÃ¨s");
      await fetchStockAlerts();
    } catch (e, st) {
      debugPrint("ðŸš¨ [Notifier] Erreur pendant createAlert: $e");
      state = AsyncError(e, st);
    }
  }
}
